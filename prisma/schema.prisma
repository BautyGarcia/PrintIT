generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Printer {
  id          String  @id @default(cuid())
  name        String
  brand       String
  model       String
  type        String
  bedSize     String
  userId      String
  isAvailable Boolean @default(true)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Work        Work[]

  @@index([userId])
}

model Work {
  id           String     @id @default(cuid())
  status       WorkStatus
  name         String
  notes        String?
  quality      String
  amount       Int
  lastBidder   RoleTypes  @default(CLIENT)
  clientId     String
  workerId     String
  printerId    String
  stlUrl       String?
  preferenceId String?    @unique
  printer      Printer    @relation(fields: [printerId], references: [id], onDelete: Cascade)
  client       User       @relation("ClientRelation", fields: [clientId], references: [id], onDelete: Cascade)
  worker       User       @relation("WorkerRelation", fields: [workerId], references: [id], onDelete: Cascade)
  prices       Prices[]

  @@index([clientId])
  @@index([workerId])
  @@index([printerId])
}

model Prices {
  id        String   @id @default(cuid())
  amount    Int
  offeredAt DateTime @default(now())
  workId    String
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
}

enum WorkStatus {
  Cancelado
  Negociacion
  Pagando
  Imprimiendo
  Enviando
  Finalizado
}

enum RoleTypes {
  CLIENT
  WORKER
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  mp_token      String?
  accounts      Account[]
  sessions      Session[]
  printers      Printer[]
  worksAsClient Work[]    @relation("ClientRelation")
  worksAsWorker Work[]    @relation("WorkerRelation")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
}
